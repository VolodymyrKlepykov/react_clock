{"version":3,"sources":["components/Clock/Clock.jsx","components/Button/Button.jsx","App.js","index.js"],"names":["Clock","state","time","Date","toLocaleTimeString","timer","setState","console","log","this","timerInterval","setInterval","prevProps","name","props","clearInterval","Component","Button","handleClickOn","parentClickOn","handleClickOff","parentClickOff","getRandomName","parentGetRandomName","onClick","className","type","App","isClockVisible","clockName","Math","floor","random","gettingClock","ReactDOM","render","document","getElementById"],"mappings":"uMAGaA,EAAb,4MACEC,MAAQ,CACNC,MAAM,IAAIC,MAAOC,sBAFrB,EAqBEC,MAAQ,WACN,EAAKC,SAAS,CACZJ,MAAM,IAAIC,MAAOC,uBAEnBG,QAAQC,IAAI,EAAKP,MAAMC,OAzB3B,uDAKE,WACEO,KAAKC,cAAgBC,YAAYF,KAAKJ,MAAO,OANjD,gCASE,SAAmBO,GACjB,IAAQC,EAASJ,KAAKK,MAAdD,KAEJA,IAASD,EAAUC,MACrBN,QAAQC,IAAR,qCAA0CI,EAAUC,KAApD,eAA+DA,MAbrE,kCAiBE,WACEE,cAAcN,KAAKC,iBAlBvB,oBA4BE,WACE,OACE,oCACGD,KAAKR,MAAMC,UA/BpB,GAA2Bc,aCAdC,EAAb,4MACEC,cAAgB,WACd,EAAKJ,MAAMK,iBAFf,EAKGC,eAAiB,WACf,EAAKN,MAAMO,kBANhB,EASEC,cAAgB,WACd,EAAKR,MAAMS,uBAVf,4CAaE,WACE,OACE,oCACE,4BACEC,QAASf,KAAKS,cACdO,UAAU,cACVC,KAAK,UAHP,cAOA,4BACEF,QAASf,KAAKW,eACdK,UAAU,cACVC,KAAK,UAHP,cAOA,4BACEF,QAASf,KAAKa,cACdG,UAAU,cACVC,KAAK,UAHP,wBA9BR,GAA4BV,aCGfW,G,MAAb,4MACE1B,MAAQ,CACN2B,gBAAgB,EAChBC,UAAW,GAHf,EAMEX,cAAgB,WACd,EAAKZ,SAAS,CACZsB,gBAAgB,KARtB,EAYGR,eAAiB,WACf,EAAKd,SAAS,CACZsB,gBAAgB,KAdvB,EAkBEN,cAAgB,WACd,EAAKhB,SAAS,CACZuB,UAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,aApBjC,4CAwBE,WACE,IAAMC,EAAexB,KAAKR,MAAM2B,eAC5B,kBAAC,EAAD,CAAOf,KAAMJ,KAAKR,MAAM4B,YADP,WAGrB,OACE,yBAAKJ,UAAU,OACb,2CACA,2CAEG,IACAQ,GAEH,kBAAC,EAAD,CACEd,cAAeV,KAAKS,cACpBG,eAAgBZ,KAAKW,eACrBG,oBAAqBd,KAAKa,qBAvCpC,GAAyBN,cCFzBkB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.1bb17c79.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Clock extends Component {\n  state = {\n    time: new Date().toLocaleTimeString(),\n  }\n\n  componentDidMount() {\n    this.timerInterval = setInterval(this.timer, 1000);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { name } = this.props;\n\n    if (name !== prevProps.name) {\n      console.log(`The Clock was renamed from ${prevProps.name} to ${name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerInterval);\n  }\n\n  timer = () => {\n    this.setState({\n      time: new Date().toLocaleTimeString(),\n    });\n    console.log(this.state.time);\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.time}\n      </>\n    );\n  }\n}\n\nClock.propTypes = {\n  name: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Button extends Component {\n  handleClickOn = () => {\n    this.props.parentClickOn();\n  }\n\n   handleClickOff = () => {\n     this.props.parentClickOff();\n   }\n\n  getRandomName = () => {\n    this.props.parentGetRandomName();\n  }\n\n  render() {\n    return (\n      <>\n        <button\n          onClick={this.handleClickOn}\n          className=\"post-button\"\n          type=\"button\"\n        >\n          Show Clock\n        </button>\n        <button\n          onClick={this.handleClickOff}\n          className=\"post-button\"\n          type=\"button\"\n        >\n          Hide Clock\n        </button>\n        <button\n          onClick={this.getRandomName}\n          className=\"post-button\"\n          type=\"button\"\n        >\n          Set random name\n        </button>\n      </>\n    );\n  }\n}\n\nButton.propTypes = {\n  parentClickOn: PropTypes.func.isRequired,\n  parentClickOff: PropTypes.func.isRequired,\n  parentGetRandomName: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Clock } from './components/Clock/Clock';\nimport { Button } from './components/Button/Button';\n\nimport './App.scss';\n\nexport class App extends Component {\n  state = {\n    isClockVisible: true,\n    clockName: 0,\n  }\n\n  handleClickOn = () => {\n    this.setState({\n      isClockVisible: true,\n    });\n  }\n\n   handleClickOff = () => {\n     this.setState({\n       isClockVisible: false,\n     });\n   }\n\n  getRandomName = () => {\n    this.setState({\n      clockName: Math.floor(Math.random() * 100),\n    });\n  }\n\n  render() {\n    const gettingClock = this.state.isClockVisible\n      ? <Clock name={this.state.clockName} /> : `00:00:00`;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <p>\n          Current time:\n          {' '}\n          {gettingClock}\n        </p>\n        <Button\n          parentClickOn={this.handleClickOn}\n          parentClickOff={this.handleClickOff}\n          parentGetRandomName={this.getRandomName}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}